"use client";

import * as React from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import type { Customer } from "@/lib/types";
import { fetchCustomerInsights } from "../actions";

export function InsightsDialog({
  isOpen,
  onOpenChange,
  customer,
}: {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  customer: Customer | null;
}) {
  const [insights, setInsights] = React.useState<string | null>(null);
  const [isLoading, setIsLoading] = React.useState(false);

  React.useEffect(() => {
    if (isOpen && customer) {
      setIsLoading(true);
      setInsights(null);
      fetchCustomerInsights(customer.name).then((data) => {
        setInsights(data);
        setIsLoading(false);
      });
    }
  }, [isOpen, customer]);

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="font-headline">
            AI Insights for {customer?.name}
          </DialogTitle>
          <DialogDescription>
            A summary of recent news and social media activity.
          </DialogDescription>
        </DialogHeader>
        <div className="space-y-4 py-4">
          {isLoading && (
            <div className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-3/4" />
            </div>
          )}
          {insights && <p className="text-sm text-foreground">{insights}</p>}
        </div>
        <DialogFooter className="flex-col items-start gap-2">
            <p className="text-xs text-muted-foreground">
                Disclaimer: This summary is generated by AI and may not be completely accurate.
            </p>
          <Button type="button" variant="secondary" onClick={() => onOpenChange(false)}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
